# DevOps Pipeline Project

A comprehensive DevOps pipeline implementation featuring containerized Python (Flask) and Node.js (Express) servers with automated CI/CD workflows using GitHub Actions and Docker.

## Overview

This project demonstrates modern DevOps practices by implementing:
- Multi-container architecture with Python and Node.js services
- Automated CI/CD pipelines using GitHub Actions
- Docker containerization with optimized multi-stage builds
- Automated Docker image publishing to DockerHub

## Architecture

### Services

1. **Python Server**
   - Flask-based REST API
   - Containerized with multi-stage Docker build
   - Exposed on port 5000
   - Automated builds on pull requests

2. **Node.js Server**
   - Express-based REST API
   - Containerized with multi-stage Docker build
   - Exposed on port 3000
   - Automated builds on main branch pushes

### Project Structure

```
.
├── python-server/
│   ├── Dockerfile
│   ├── app.py
│   └── requirements.txt
├── nodejs-server/
│   ├── Dockerfile
│   ├── app.js
│   └── package.json
└── .github/
    └── workflows/
        ├── pull_request.yml
        └── push_to_main.yml
```

## Prerequisites

- Docker
- Git
- Node.js (for local development)
- Python (for local development)
- DockerHub account

## Local Development

### Python Server

```bash
# Navigate to Python server directory
cd python-server

# Build Docker image
docker build -t python-server .

# Run container
docker run -p 5000:5000 python-server

# Access API at http://localhost:5000
```

### Node.js Server

```bash
# Navigate to Node.js server directory
cd nodejs-server

# Build Docker image
docker build -t nodejs-server .

# Run container
docker run -p 3000:3000 nodejs-server

# Access API at http://localhost:3000
```

## CI/CD Workflows

### Pull Request Workflow
- Triggers on pull requests to main branch
- Builds Python server Docker image
- Pushes image to DockerHub with PR-specific tag

### Main Branch Workflow
- Triggers on pushes to main branch
- Builds Node.js server Docker image
- Pushes image to DockerHub with latest tag

## Setup

1. Fork and clone the repository:
   ```bash
   git clone https://github.com/yourusername/DevOps-Pipeline-Project.git
   cd DevOps-Pipeline-Project
   ```

2. Configure GitHub Secrets:
   - Navigate to Repository Settings > Secrets
   - Add the following secrets:
     - `DOCKER_USERNAME`: Your DockerHub username
     - `DOCKER_PASSWORD`: Your DockerHub password/token

3. Push changes to trigger workflows:
   ```bash
   git add .
   git commit -m "Initial commit"
   git push origin main
   ```

## Pulling Docker Images

```bash
# Pull Python server image
docker pull <your-dockerhub-username>/python-server:latest

# Pull Node.js server image
docker pull <your-dockerhub-username>/nodejs-server:latest
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit changes
4. Push to the branch
5. Open a pull request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- GitHub Actions for CI/CD automation
- Docker for containerization platform
- Flask and Express.js frameworks

## Support

For support, please open an issue in the GitHub repository or contact the maintainers.
